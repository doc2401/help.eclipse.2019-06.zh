<?xml version="1.0" encoding="UTF-8"?><!--
    Copyright (c) 2008, 2018 SAP AG and IBM Corporation
    All rights reserved. This program and the accompanying materials
    are made available under the terms of the Eclipse Public License v1.0
    which accompanies this distribution, and is available at
    http://www.eclipse.org/legal/epl-v10.html
   
    Contributors:
        SAP AG - initial API and implementation
        Andrew Johnson/IBM Corporation - XML validation
 -->

<cheatsheet title="How to find memory problems">
<!--
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="org.eclipse.ui.cheatsheets platform:/resource/org.eclipse.mat.ui.help/schema/cheatSheetContentFileSpec.xsd"
   xmlns="org.eclipse.ui.cheatsheets">
-->
   <intro>
      <description>
         这个备忘单提供了一些指导如何使用Memory Analyzer工具
找到记忆问题。
      </description>
   </intro>
   <item title="Analysis steps overview" dialog="true" skip="true">
      <description>
         1.快速浏览堆
2.搜索保留大小的单个对象 - 之后很容易分析它们
3.搜索具有大保留大小的对象组 - 如果没有巨大的单个对象，尝试使用尽可能少的对象形成不同的组
      </description>
   </item>
   <item title="1. Get a quick overview" dialog="true" skip="true">
      <description>
         作为分析的起点，快速概述。
      </description>
      <subitem label="查看类直方图并找到具有最大浅堆大小的类。" skip="true">
      </subitem>
      <subitem label="切换到类加载器视图，找到具有最大浅堆大小的类加载器。" skip="true">
      </subitem>
      <subitem label="执行“top_consumers”查询以获得顶级支配者的摘要" skip="true">
      </subitem>
   </item>
   <item title="2. Search for and explore the biggest objects" dialog="true" skip="true">
      <description>
         打开支配树，看看最大的物体。如果某些对象的保留大小太大，请执行以下操作：
      </description>
      <subitem label="选择Dominator Tree中的一个可疑对象并展开它的子树。重复此操作，直到父节点和子节点之间的保留大小达到显着下降。这是记忆累积发生的地方。" skip="true">
      </subitem>
      <subitem label="右键单击以打开上下文菜单。选择“在GC根路径中打开...”和任何子选项" skip="true">
      </subitem>
      <subitem label="现在，您可以看到包含所有字段名称的真实参考路径。从这里可以进行精细分析。" skip="true">
      </subitem>
   </item>
   <item title="3. No huge single objects? Try to find suspicious object groups" dialog="true" skip="true">
      <description>
         如果支配树不包含任何具有的对象
保留大小非常大，然后尝试查找占用大量内存的对象组。
通常较小的群体更容易进一步分析。
      </description>
   </item>
   <item title="3.1. Grouping objects" dialog="true" skip="false">
      <description>
         以下是如何找到有趣的对象组的几个想法
      </description>
      <subitem label="打开支配树并按类对对象进行分组。在支配树的顶层对象的保留大小的总和等于总堆大小。因此，在这里找到一个有趣的小组的机会很大。" skip="true">
      </subitem>
      <subitem label="转到直方图视图，找到最大类的支配者 - 使用“立即支配者”。上下文菜单，过滤掉java *包。" skip="true">
      </subitem>
      <subitem label="切换到类加载器视图并计算顶部的保留大小 - 使用“计算保留大小”和“计算保留大小”。上下文菜单" skip="true">
      </subitem>
      <subitem label="如果直方图中有一个占用太多内存的数组类，那么尝试查找具有一个相同大小的数组。执行“Java Collections  - >按大小分组的数组”上下文菜单查询。" skip="true">
      </subitem>
   </item>
   <item title="3.2. Analyzing object groups" dialog="true" skip="false">
      <description>
         找到可疑的一组对象后，可以使用以下某个对象进行进一步分析
      </description>
      <subitem label="计算组的保留大小" skip="true">
      </subitem>
      <subitem label="显示和分析组中保留集中的对象" skip="true">
      </subitem>
      <subitem label="计算组中每个对象的最短路径，一起查看路径，并检查是否存在公共部分（可以通过直方图的上下文菜单“从GC根目录中打开多个路径”）" skip="true">
      </subitem>
   </item>
</cheatsheet>
